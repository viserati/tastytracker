CHECKING AND UPDATING NPM AND OTHER PACKAGES

The npm package manager is updated more often than node.js. As of
publication date, we believe node.js is finally installing a 3.x
version of npm, but while we were writing the book, node.js was
installing a 2.x, and node.js's latest versions are 4.x. We require a
3.x version of npm or better.

Version numbering is usually in the scheme
      major_version.minor_version.patch
and is sometimes referred to as "semantic versioning." A typical
version number in a semantic-versioning scheme might be 2.0.5, which
would tell you this is the second major version of the package and
that there have not yet been any minor version changes, but there have
been five (often fairly small) "patch" changes since 2.0.0.

Major version changes can safely be assumed to break things. If your
code was written to go with version 2.x of something--"2.x" meaning a
major version number of 2 plus any combination of minor and patch
numbers--it probably won't still work with 3.x without making changes,
possibly significant ones. Minor version changes and patch changes are
usually safe; if your code worked with 2.1.x of a tool, it will
probably keep working with 2.2.x without needing adjustments. (But
there are exceptions.) Patch version changes are usually supposed to
be harmless.

To check the installed version of npm:

Open a command-line window and go to the directory where we installed
npm. (Again, substitute your actual installation path for the examples
below.)

Windows users: Open the Start menu; in the search box at the
bottom of this menu type
     cmd
Windows offers you cmd.exe as a choice. Select that. In the window
that then opens, change to the directory where you installed node.js:
type
     cd \nodejs
and press Enter.

Windows won't change drives and directories with the same command. So,
if you start out on C:\Windows\system32\ and you need to be in
D:\nodejs\, you'll have to do it in two steps: enter
     D: 
by itself as a command, and then
     cd \nodejs
The window prompt always shows you what it thinks is your current
location.

Mac users: Launch Applications > Utilities > Terminal. In the window
that then opens, enter this command:
     cd /usr/local/bin
In a Mac command window, the current path is not shown as the
prompt. If you're ever in doubt about what directory you're in, use
the command
     pwd
("print working directory").

On either system, once you're in the right place, enter the command:
     npm version

Somewhere in the various version numbers it lists will be the npm
version number (the line that has "npm:"). If that version number
begins with 3, you need not upgrade and can skip to the next part. If
it starts with a 2, enter this command:
Windows:
     npm install npm@3
Mac:
     sudo npm install npm@3 --global
(You will be asked for the administrator password.)

This command tells npm to install a package named npm (which is
itself!), and the "@3" appended to it means "we want a major version
of at least 3." Because the Mac version installs in a slightly
different configuration, it needs the "--global" switch (additional
option) added to the base command.

The package should upgrade with no serious errors. A WARN message can
safely be ignored for our purposes. An ERR message will stop the
install and we must deal with it. The most likely cause of this is if
you don't have the necessary permissions to upgrade. You can check to
see if the upgrade worked by typing
     npm version
again and checking that npm now has a 3.x version number.

Apart from npm itself, the project file specifies what version of each
package we need, although only two of the packages in the file have
exact specifiers. It's better to allow npm to get the most recent
suitable version where possible. For Angular, for example, we merely
require that the version be something in the 2.x family (except the
router, which required we use the 3.x version at the time we wrote the
book). On the other hand, we require the moment package to be at least
2.13.0 or better (that's the purpose of the "greater than or equal to"
operator in the project file). Hopefully, we've given acceptable
version numbers in a broad enough range that even if you install this
project some years from now, there won't be version conflicts.

We've tried to make our software version choices as foolproof and
long-lived as possible, but there are two exceptions: rxjs and
Bootstrap are still using "pre-release versioning" as of this
writing. Because of this, we can't use the .x or >= method to provide
wiggle room. Instead, we've specified an exact version for both of
these. Perhaps by the time you read this, rxjs and Bootstrap will
have moved to semantic versioning. At any rate, it's to your benefit
to check what's available. For rxjs, any 5.x version should work; for
Bootstrap, you'll want at least the 4.0.0-alpha.5 version specified,
but any 4.x version later than that should work as well.
